[
    {
        "id": "6a8edfdc97cb68bb",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "293abc423b056112",
        "type": "mqtt-broker",
        "name": "",
        "broker": "sprc3_mosquitto",
        "port": "1883",
        "clientid": "Node-Red-Client",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8140b2d2a8cd9522",
        "type": "influxdb",
        "hostname": "sprc3_influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "iot_data",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://sprc3_influxdb:8086",
        "rejectUnauthorized": false
    },
    {
        "id": "9a1e0a3cd4d261c7",
        "type": "mqtt in",
        "z": "6a8edfdc97cb68bb",
        "name": "Mosquitto",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "293abc423b056112",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 60,
        "wires": [
            [
                "83907bc1c63c8cca",
                "d1ebca6aae476305"
            ]
        ]
    },
    {
        "id": "2e4ba6dacdc16090",
        "type": "influxdb out",
        "z": "6a8edfdc97cb68bb",
        "influxdb": "8140b2d2a8cd9522",
        "name": "InfluxDB",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "UPB",
        "bucket": "iot_data",
        "x": 540,
        "y": 60,
        "wires": []
    },
    {
        "id": "d1ebca6aae476305",
        "type": "debug",
        "z": "6a8edfdc97cb68bb",
        "name": "MQTT_input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 130,
        "y": 140,
        "wires": []
    },
    {
        "id": "c6a9e9ac3f8ed22b",
        "type": "inject",
        "z": "6a8edfdc97cb68bb",
        "name": "Ping MqttClient",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "c87793b6a9b4d586"
            ]
        ]
    },
    {
        "id": "c87793b6a9b4d586",
        "type": "http request",
        "z": "6a8edfdc97cb68bb",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://Tema3-IoT_mqtt-client:6000/ping",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 330,
        "y": 260,
        "wires": [
            [
                "8578a0a3abaac3bb"
            ]
        ]
    },
    {
        "id": "8578a0a3abaac3bb",
        "type": "debug",
        "z": "6a8edfdc97cb68bb",
        "name": "HTTP Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 260,
        "wires": []
    },
    {
        "id": "a588503d214c13ff",
        "type": "http request",
        "z": "6a8edfdc97cb68bb",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "http://sprc3_mqtt-client:6000/publish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 410,
        "y": 600,
        "wires": [
            [
                "589fce16a72abf47"
            ]
        ]
    },
    {
        "id": "a3ff1387d3b2e018",
        "type": "inject",
        "z": "6a8edfdc97cb68bb",
        "name": "Send message to MqttClient",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 380,
        "wires": [
            [
                "05c394af3692ddd2"
            ]
        ]
    },
    {
        "id": "589fce16a72abf47",
        "type": "debug",
        "z": "6a8edfdc97cb68bb",
        "name": "Request Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 600,
        "wires": []
    },
    {
        "id": "0e1a609ac829dbfe",
        "type": "function",
        "z": "6a8edfdc97cb68bb",
        "name": "Parse JSON to String",
        "func": "// Store the message object in a variable\nvar messageObj = msg.payload.message;\n\n// Stringify only the message object\nmsg.payload.message = JSON.stringify(messageObj);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 600,
        "wires": [
            [
                "a588503d214c13ff",
                "a52817d01fdbd8b4"
            ]
        ]
    },
    {
        "id": "c3cb3ad107b502c7",
        "type": "function",
        "z": "6a8edfdc97cb68bb",
        "name": "JSON Input Data",
        "func": "var number = msg.payload;\n\nswitch (number) {\n    case 1:\n        msg.payload = {\n            message: {\n                BAT: 99,\n                HUMID: 40,\n                PRJ: \"SPRC\",\n                TMP: 25.3,\n                status: \"OK\",\n                timestamp: \"2019-11-26 03:54:20 + 03:00\"\n            },\n            topic: \"UPB/RPi_1\"\n        };\n        break;\n    case 2:\n        msg.payload = {\n            message: {\n                Alarm: 0,\n                AQI: 12,\n                RSSI: 1550\n            },\n            topic: \"UPB/RPi_1\"\n        };\n        break;\n    case 3:\n        \n        break;\n\n    default:\n        // Default action when number doesn't match any case\n        msg.payload = {\n            message: {\n                message: \"This message was invalid\",\n            },\n            topic: \"invalidPayload\"\n        };        \n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 520,
        "wires": [
            [
                "0e1a609ac829dbfe"
            ]
        ]
    },
    {
        "id": "a52817d01fdbd8b4",
        "type": "debug",
        "z": "6a8edfdc97cb68bb",
        "name": "Message format",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 660,
        "wires": []
    },
    {
        "id": "05c394af3692ddd2",
        "type": "function",
        "z": "6a8edfdc97cb68bb",
        "name": "Get a random number from [a,b]",
        "func": "// Set the range [a, b]\nvar a = 1;\nvar b = 2;\n\n// Generate a random number in the range [a, b]\nvar randomNum = Math.floor(Math.random() * (b - a + 1)) + a;\n\n// Set the message payload to the random number\nmsg.payload = randomNum;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 460,
        "wires": [
            [
                "c3cb3ad107b502c7"
            ]
        ]
    },
    {
        "id": "83907bc1c63c8cca",
        "type": "function",
        "z": "6a8edfdc97cb68bb",
        "name": "msg.measurement",
        "func": "msg.measurement = \"sensorData\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 60,
        "wires": [
            [
                "2e4ba6dacdc16090"
            ]
        ]
    },
    {
        "id": "4236a527c335c211",
        "type": "switch",
        "z": "6a8edfdc97cb68bb",
        "name": "Debug on / off switch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$env('DEBUG_DATA_FLOW')",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 940,
        "y": 140,
        "wires": [
            []
        ]
    }
]