[
    {
        "id": "6a8edfdc97cb68bb",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "293abc423b056112",
        "type": "mqtt-broker",
        "name": "",
        "broker": "sprc3_mosquitto",
        "port": "1883",
        "clientid": "Node-Red-Client",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8140b2d2a8cd9522",
        "type": "influxdb",
        "hostname": "sprc3_influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "iot_data",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://sprc3_influxdb:8086",
        "rejectUnauthorized": false
    },
    {
        "id": "9a1e0a3cd4d261c7",
        "type": "mqtt in",
        "z": "6a8edfdc97cb68bb",
        "name": "Mosquitto",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "293abc423b056112",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 60,
        "wires": [
            [
                "d1ebca6aae476305",
                "7f446d00a9b24824"
            ]
        ]
    },
    {
        "id": "2e4ba6dacdc16090",
        "type": "influxdb out",
        "z": "6a8edfdc97cb68bb",
        "influxdb": "8140b2d2a8cd9522",
        "name": "InfluxDB",
        "measurement": "",
        "precision": "s",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "UPB",
        "bucket": "iot_data",
        "x": 560,
        "y": 60,
        "wires": []
    },
    {
        "id": "d1ebca6aae476305",
        "type": "debug",
        "z": "6a8edfdc97cb68bb",
        "name": "MQTT_input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 130,
        "y": 140,
        "wires": []
    },
    {
        "id": "c6a9e9ac3f8ed22b",
        "type": "inject",
        "z": "6a8edfdc97cb68bb",
        "name": "Ping MqttClient",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 980,
        "y": 200,
        "wires": [
            [
                "c87793b6a9b4d586"
            ]
        ]
    },
    {
        "id": "c87793b6a9b4d586",
        "type": "http request",
        "z": "6a8edfdc97cb68bb",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://Tema3-IoT_mqtt-client:6000/ping",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 970,
        "y": 240,
        "wires": [
            [
                "8578a0a3abaac3bb"
            ]
        ]
    },
    {
        "id": "8578a0a3abaac3bb",
        "type": "debug",
        "z": "6a8edfdc97cb68bb",
        "name": "HTTP Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 280,
        "wires": []
    },
    {
        "id": "a588503d214c13ff",
        "type": "http request",
        "z": "6a8edfdc97cb68bb",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "http://sprc3_mqtt-client:6000/publish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 410,
        "y": 400,
        "wires": [
            [
                "589fce16a72abf47"
            ]
        ]
    },
    {
        "id": "a3ff1387d3b2e018",
        "type": "inject",
        "z": "6a8edfdc97cb68bb",
        "name": "Send message to MqttClient",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "c3cb3ad107b502c7"
            ]
        ]
    },
    {
        "id": "589fce16a72abf47",
        "type": "debug",
        "z": "6a8edfdc97cb68bb",
        "name": "Request Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 400,
        "wires": []
    },
    {
        "id": "0e1a609ac829dbfe",
        "type": "function",
        "z": "6a8edfdc97cb68bb",
        "name": "Parse JSON to String",
        "func": "// Store the message object in a variable\nvar messageObj = msg.payload.message;\n\n// Stringify only the message object\nmsg.payload.message = JSON.stringify(messageObj);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 400,
        "wires": [
            [
                "a588503d214c13ff",
                "a52817d01fdbd8b4"
            ]
        ]
    },
    {
        "id": "c3cb3ad107b502c7",
        "type": "function",
        "z": "6a8edfdc97cb68bb",
        "name": "JSON Input Data",
        "func": "var caseNumber = getRandomInt(1,4);\n\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomBAT() {\n    return getRandomInt(0, 100);\n}\n\nfunction getRandomHUMID() {\n    return getRandomInt(30, 70);\n}\n\nfunction getRandomTMP() {\n    return getRandomInt(10, 40) + parseFloat(Math.random().toFixed(1));\n}\n\nfunction getRandomAlarm() {\n    return getRandomInt(0, 1);\n}\n\nfunction getRandomAQI() {\n    return getRandomInt(0, 50);\n}\n\nfunction getRandomRSSI() {\n    return getRandomInt(1300, 1700);\n}\n\nfunction getRandomTimestamp() {\n    var year = getRandomInt(2018, 2023);\n    var month = getRandomInt(1, 12);\n    var day = getRandomInt(1, 28);\n    var hours = getRandomInt(0, 23);\n    var minutes = getRandomInt(0, 59);\n    var seconds = getRandomInt(0, 59);\n\n    return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')} ${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} +03:00`;\n}\n\nswitch (caseNumber) {\n    case 1:\n        msg.payload = {\n            message: {\n                BAT: getRandomBAT(),\n                HUMID: getRandomHUMID(),\n                PRJ: \"SPRC\",\n                TMP: getRandomTMP(),\n                status: \"OK\",\n                timestamp: getRandomTimestamp()\n            },\n            topic: \"UPB/RPi_1\"\n        };\n        break;\n    case 2:\n        msg.payload = {\n            message: {\n                Alarm: getRandomAlarm(),\n                AQI: getRandomAQI(),\n                RSSI: getRandomRSSI()\n            },\n            topic: \"Dorinel/Zeus\"\n        };\n        break;\n    case 3:\n        msg.payload = {\n            message: {\n                BAT: getRandomBAT(),\n                HUMID: getRandomHUMID(),\n                PRJ: \"SPRC\",\n                TMP: getRandomTMP(),\n                status: \"OK\"\n            },\n            topic: \"UPB/RPi_1\"\n        };\n        break;\n    case 4:\n        msg.payload = {\n            message: {\n                Alarm: getRandomAlarm(),\n                AQI: getRandomAQI(),\n                RSSI: getRandomRSSI(),\n                timestamp: getRandomTimestamp()\n            },\n            topic: \"Dorinel/Zeus\"\n        };\n        break;\n    default:\n        // Default action when number doesn't match any case\n        msg.payload = {\n            message: {\n                message: \"This message was invalid\",\n            },\n            topic: \"invalidPayload\"\n        };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 340,
        "wires": [
            [
                "0e1a609ac829dbfe"
            ]
        ]
    },
    {
        "id": "a52817d01fdbd8b4",
        "type": "debug",
        "z": "6a8edfdc97cb68bb",
        "name": "Message format",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 440,
        "wires": []
    },
    {
        "id": "7f446d00a9b24824",
        "type": "function",
        "z": "6a8edfdc97cb68bb",
        "name": "Format Data",
        "func": "// Get the JSON input from MQTT message\nvar fields = msg.payload;\n\n// Log a message indicating that a message has been received\nnode.log(`Received a message by topic [${msg.topic}]`);\n\n// Set the measurement name\nmsg.measurement = \"iot_data\";\n\n// Use the timestamp from the payload or default to the current time\nvar timestamp;\nif (fields.timestamp) {\n    timestamp = parseDateString(fields.timestamp);\n    node.log(`Data timestamp is ${fields.timestamp}`);\n} else {\n    timestamp = new Date();\n    node.log(\"Data timestamp is NOW\");\n}\nvar time = timestamp.getTime();\n\ntimestamp = convertTimestamp(timestamp);\n// Check if the timestamp is valid\nif (timestamp && !isNaN(time)) {\n    var output = {};\n\n    // Filter and log only numerical fields\n    for (const [field, value] of Object.entries(fields)) {\n        if (typeof value === \"number\") {\n            node.log(`${msg.topic}.${field} ${value}`);\n            // Include only numerical fields in the message\n            output[`${msg.topic}.${field}`] = value;\n        }\n    }\n    // Format time from ms to s\n    output.time = Math.floor(time / 1000);\n    msg.payload = output;\n} else {\n    // Log an error message\n    node.error(\"Invalid timestamp received\");\n    // Set payload to null or an appropriate value to indicate invalid timestamp\n    msg.payload = null;\n    // Stop the flow by returning null or an empty object\n    return null;\n}\nreturn msg;\n\nfunction parseDateString(dateString) {\n    // Format the dateString\n    dateString = dateString.slice(0, -6) + dateString.slice(-5);\n    \n    // Split the date string into its components\n    const [datePart, timePart, offsetPart] = dateString.split(' ');\n\n    // Split the date component into year, month, and day\n    const [year, month, day] = datePart.split('-');\n\n    // Split the time component into hours, minutes, and seconds\n    const [hours, minutes, seconds] = timePart.split(':');\n\n    // Split the offset component into hours and minutes\n    const [offsetHours, offsetMinutes] = offsetPart.split(':');\n\n    // Create a new Date object with the extracted components\n    const parsedDate = new Date(\n        parseInt(year),\n        parseInt(month) - 1, // Months are 0-based in JavaScript Dates\n        parseInt(day),\n        parseInt(hours),\n        parseInt(minutes),\n        parseInt(seconds)\n    );\n\n    // Adjust the date based on the time zone offset\n    parsedDate.setHours(parsedDate.getHours() - parseInt(offsetHours));\n    parsedDate.setMinutes(parsedDate.getMinutes() - parseInt(offsetMinutes));\n\n    return parsedDate;\n}\n\nfunction convertTimestamp(timestampStr) {\n    // Convert timestamp string to a Date object\n    const timestamp = new Date(timestampStr);\n\n    // Add 2 hours to resemble GMT +2 time\n    timestamp.setHours(timestamp.getHours() + 2);\n\n    // Define the month names in Romanian\n    const months = ['ianuarie', 'februarie', 'martie', 'aprilie', 'mai', 'iunie', 'iulie', 'august', 'septembrie', 'octombrie', 'noiembrie', 'decembrie'];\n\n    // Format the date in the desired format\n    const formattedStr = `${timestamp.getDate()} ${months[timestamp.getMonth()]} ${timestamp.getFullYear()}, ora ${timestamp.toLocaleTimeString('en-US', { hour12: true, hour: 'numeric', minute: 'numeric', second: 'numeric' })}`;\n\n    return formattedStr;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "2e4ba6dacdc16090",
                "84e98c94accb4d5e",
                "c45e83be29ab7f2b"
            ]
        ]
    },
    {
        "id": "84e98c94accb4d5e",
        "type": "debug",
        "z": "6a8edfdc97cb68bb",
        "name": "InfluxDB payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 120,
        "wires": []
    },
    {
        "id": "c45e83be29ab7f2b",
        "type": "debug",
        "z": "6a8edfdc97cb68bb",
        "name": "InfluxDB measurement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "measurement",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 180,
        "wires": []
    }
]